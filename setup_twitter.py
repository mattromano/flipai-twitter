#!/usr/bin/env python3
"""
Setup script for Twitter API credentials.
Helps configure environment variables for Twitter posting.
"""

import os
import sys
from pathlib import Path


def setup_twitter_credentials():
    """Interactive setup for Twitter API credentials."""
    print("🐦 Twitter API Setup")
    print("=" * 50)
    print()
    print("To use Twitter posting, you need to set up API credentials.")
    print("Follow these steps:")
    print()
    print("1. Go to https://developer.twitter.com/")
    print("2. Sign in with your Twitter account")
    print("3. Create a new app (or use existing one)")
    print("4. Go to 'Keys and tokens' tab")
    print("5. Generate/regenerate your API keys")
    print()
    print("You'll need these credentials:")
    print("- Bearer Token")
    print("- API Key (Consumer Key)")
    print("- API Key Secret (Consumer Secret)")
    print("- Access Token")
    print("- Access Token Secret")
    print()
    
    # Check if .env file exists
    env_file = Path(".env")
    if env_file.exists():
        print("📁 Found existing .env file")
        response = input("Do you want to update it? (y/n): ").lower().strip()
        if response != 'y':
            print("Setup cancelled.")
            return
    
    print()
    print("Enter your Twitter API credentials:")
    print("(Press Enter to skip any field)")
    print()
    
    credentials = {}
    
    # Get credentials
    credentials['TWITTER_BEARER_TOKEN'] = input("Bearer Token: ").strip()
    credentials['TWITTER_CONSUMER_KEY'] = input("API Key (Consumer Key): ").strip()
    credentials['TWITTER_CONSUMER_SECRET'] = input("API Key Secret (Consumer Secret): ").strip()
    credentials['TWITTER_ACCESS_TOKEN'] = input("Access Token: ").strip()
    credentials['TWITTER_ACCESS_TOKEN_SECRET'] = input("Access Token Secret: ").strip()
    
    # Filter out empty credentials
    credentials = {k: v for k, v in credentials.items() if v}
    
    if not credentials:
        print("❌ No credentials provided. Setup cancelled.")
        return
    
    # Write to .env file
    try:
        with open(env_file, 'w') as f:
            f.write("# Twitter API Credentials\n")
            f.write("# Generated by setup_twitter.py\n\n")
            for key, value in credentials.items():
                f.write(f"{key}={value}\n")
        
        print(f"✅ Credentials saved to {env_file}")
        print()
        print("🔧 To use these credentials:")
        print("1. Install python-dotenv: pip install python-dotenv")
        print("2. Load them in your script:")
        print("   from dotenv import load_dotenv")
        print("   load_dotenv()")
        print()
        print("🚀 You can now run: python twitter_poster.py")
        
    except Exception as e:
        print(f"❌ Failed to save credentials: {e}")


def test_twitter_connection():
    """Test Twitter API connection."""
    print("🧪 Testing Twitter API Connection")
    print("=" * 40)
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        import tweepy
        
        # Load credentials
        credentials = {
            'bearer_token': os.getenv('TWITTER_BEARER_TOKEN'),
            'consumer_key': os.getenv('TWITTER_CONSUMER_KEY'),
            'consumer_secret': os.getenv('TWITTER_CONSUMER_SECRET'),
            'access_token': os.getenv('TWITTER_ACCESS_TOKEN'),
            'access_token_secret': os.getenv('TWITTER_ACCESS_TOKEN_SECRET'),
        }
        
        # Check if all credentials are available
        missing = [k for k, v in credentials.items() if not v]
        if missing:
            print(f"❌ Missing credentials: {missing}")
            return False
        
        # Test connection
        client = tweepy.Client(
            bearer_token=credentials['bearer_token'],
            consumer_key=credentials['consumer_key'],
            consumer_secret=credentials['consumer_secret'],
            access_token=credentials['access_token'],
            access_token_secret=credentials['access_token_secret']
        )
        
        # Get user info
        user = client.get_me()
        if user.data:
            print(f"✅ Connected successfully!")
            print(f"👤 User: @{user.data.username}")
            print(f"📝 Name: {user.data.name}")
            return True
        else:
            print("❌ Failed to get user info")
            return False
            
    except ImportError:
        print("❌ Required packages not installed")
        print("Install with: pip install tweepy python-dotenv")
        return False
    except Exception as e:
        print(f"❌ Connection failed: {e}")
        return False


def main():
    """Main setup function."""
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        test_twitter_connection()
    else:
        setup_twitter_credentials()


if __name__ == "__main__":
    main()
