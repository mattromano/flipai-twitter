name: Flipside AI + Twitter Automation

on:
  schedule:
    # Run daily at 9 AM UTC
    - cron: '0 9 * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      prompt_type:
        description: 'Prompt selection type'
        required: false
        default: 'random'
        type: choice
        options:
          - random
          - custom
      custom_prompt:
        description: 'Custom analysis prompt (only used if prompt_type is custom)'
        required: false
        default: 'Give me a comprehensive analysis of the current DeFi landscape, focusing on TVL trends and major protocol performance'
      category_filter:
        description: 'Filter prompts by category (only used if prompt_type is random)'
        required: false
      difficulty_filter:
        description: 'Filter prompts by difficulty (only used if prompt_type is random)'
        required: false
        default: 'intermediate'
        type: choice
        options:
          - intermediate
          - advanced

jobs:
  analyze:
    runs-on: ubuntu-latest
    environment: twitter_analyst
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Create virtual environment
      run: python -m venv venv
      
    - name: Activate virtual environment and install dependencies
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Set up Chrome and ChromeDriver
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: 'latest'
        
    - name: Create cookies file
      run: |
        echo "${{ secrets.FLIPSIDE_COOKIES }}" > flipside_cookies.txt
        
    - name: Run Full Flipside AI + Twitter Workflow
      env:
        # Twitter API credentials
        TWITTER_BEARER_TOKEN: ${{ secrets.TWITTER_BEARER_TOKEN }}
        TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
        TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
        TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        TWITTER_ACCESS_TOKEN_SECRET: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        # Flipside login credentials (for CI fallback)
        FLIPSIDE_EMAIL: ${{ secrets.FLIPSIDE_EMAIL }}
        FLIPSIDE_PASSWORD: ${{ secrets.FLIPSIDE_PASSWORD }}
        # Analysis settings
        DEBUG_MODE: 'false'
        HEADLESS_MODE: 'true'
        CHROME_HEADLESS: 'true'
      run: |
        source venv/bin/activate
        
        # Determine prompt selection method
        PROMPT_TYPE="${{ github.event.inputs.prompt_type || 'random' }}"
        
        if [ "$PROMPT_TYPE" = "custom" ]; then
          # Use custom prompt
          CUSTOM_PROMPT="${{ github.event.inputs.custom_prompt || 'Give me a comprehensive analysis of the current DeFi landscape, focusing on TVL trends and major protocol performance' }}"
          python main_workflow.py --prompt "$CUSTOM_PROMPT"
        else
          # Use random prompt selection
          CATEGORY_FILTER="${{ github.event.inputs.category_filter }}"
          DIFFICULTY_FILTER="${{ github.event.inputs.difficulty_filter || 'intermediate' }}"
          
          # Build command with filters
          CMD="python main_workflow.py --random-prompt"
          if [ -n "$CATEGORY_FILTER" ]; then
            CMD="$CMD --category '$CATEGORY_FILTER'"
          fi
          if [ -n "$DIFFICULTY_FILTER" ]; then
            CMD="$CMD --difficulty $DIFFICULTY_FILTER"
          fi
          
          # Execute the command
          eval $CMD
        fi
        
    - name: Upload screenshots as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-screenshots-${{ github.run_number }}
        path: |
          screenshots/
          charts/
        retention-days: 30
        
    - name: Upload logs as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-logs-${{ github.run_number }}
        path: logs/
        retention-days: 7
        
    - name: Upload analysis results as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-results-${{ github.run_number }}
        path: |
          logs/analysis_*.json
          logs/twitter_posts_*.jsonl
        retention-days: 30
        
    - name: Create analysis summary
      if: always()
      run: |
        echo "## 🤖 Flipside AI + Twitter Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        
        # Show prompt selection details
        PROMPT_TYPE="${{ github.event.inputs.prompt_type || 'random' }}"
        echo "**Prompt Selection:** $PROMPT_TYPE" >> $GITHUB_STEP_SUMMARY
        
        if [ "$PROMPT_TYPE" = "custom" ]; then
          CUSTOM_PROMPT="${{ github.event.inputs.custom_prompt || 'Default prompt' }}"
          echo "**Custom Prompt:** $CUSTOM_PROMPT" >> $GITHUB_STEP_SUMMARY
        else
          CATEGORY_FILTER="${{ github.event.inputs.category_filter }}"
          DIFFICULTY_FILTER="${{ github.event.inputs.difficulty_filter || 'intermediate' }}"
          if [ -n "$CATEGORY_FILTER" ]; then
            echo "**Category Filter:** $CATEGORY_FILTER" >> $GITHUB_STEP_SUMMARY
          fi
          echo "**Difficulty Filter:** $DIFFICULTY_FILTER" >> $GITHUB_STEP_SUMMARY
          
          # Try to get the selected prompt info from logs
          if [ -d "logs" ]; then
            LATEST_LOG=$(find logs/ -name "*.log" -type f -exec ls -t {} + | head -1)
            if [ -n "$LATEST_LOG" ]; then
              SELECTED_PROMPT=$(grep "Selected random prompt" "$LATEST_LOG" | tail -1 || echo "")
              if [ -n "$SELECTED_PROMPT" ]; then
                echo "**Selected Prompt:** $SELECTED_PROMPT" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          fi
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -d "logs" ]; then
          echo "### 📁 Generated Files" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots: \`screenshots/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Charts: \`charts/\`" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis Logs: \`logs/analysis_*.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- Twitter Posts: \`logs/twitter_posts_*.jsonl\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count files
          SCREENSHOT_COUNT=$(find screenshots/ -name "*.png" 2>/dev/null | wc -l || echo "0")
          CHART_COUNT=$(find charts/ -name "*.png" 2>/dev/null | wc -l || echo "0")
          LOG_COUNT=$(find logs/ -name "analysis_*.json" 2>/dev/null | wc -l || echo "0")
          TWITTER_COUNT=$(find logs/ -name "twitter_posts_*.jsonl" 2>/dev/null | wc -l || echo "0")
          
          echo "### 📈 Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- Screenshots captured: $SCREENSHOT_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Charts generated: $CHART_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Analysis logs: $LOG_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Twitter posts: $TWITTER_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show latest Twitter post if available
          LATEST_TWITTER=$(find logs/ -name "twitter_posts_*.jsonl" -exec tail -1 {} \; 2>/dev/null | head -1)
          if [ -n "$LATEST_TWITTER" ]; then
            echo "### 🐦 Latest Twitter Post" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "$LATEST_TWITTER" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
        fi
